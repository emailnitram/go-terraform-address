{
package address

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

func toIfaceSlice(v interface{}) []interface{} {
    if v == nil {
        return nil
    }
    return v.([]interface{})
}

}

/*
https://www.terraform.io/docs/internals/resource-addressing.html
*/

// [module path][resource spec]
Address = m:(Module ".")* r:ResourceSpec EOF {
    mi := toIfaceSlice(m)
    v := make(ModulePath, len(mi))
    for i, mp := range mi {
        v[i] = toIfaceSlice(mp)[0].(Module)
    }
    return &Address{
        v,
        r.(ResourceSpec),
    }, nil
}

// module.module_name[module index]
Module = "module." name:Identifier i:Index? {
    m := Module{
        Name: name.(string),
    }
    if i != nil {
        m.Index = i.(Index)
    }
    return m, nil
}

// resource_type.resource_name[resource index]
ResourceSpec = rType:Identifier "." name:Identifier i:Index? {
    r := ResourceSpec{
        Type: rType.(string),
        Name: name.(string),
    }
    if i != nil {
        r.Index = i.(Index)
    }
    return r, nil
}

/*
* Index can be one of

  - [N] where N is a 0-based numerical index into a resource with multiple
    instances specified by the count meta-argument. Omitting an index when
    addressing a resource where count > 1 means that the address references
    all instances.
  - ["INDEX"] where INDEX is a alphanumerical key index into
    a resource with multiple instances specified by the for_each
    meta-argument.

https://github.com/hashicorp/terraform/blob/ef071f3d0e49ba421ae931c65b263827a8af1adb/website/docs/internals/resource-addressing.html.markdown#index-values-for-modules-and-resources
*/
Index = "[" i:(Integer / String) "]" {
    return Index{Value:i}, nil
}

/*
Data sources

---
Reference expressions [take the form of] data.<TYPE>.<NAME>.<ATTRIBUTE>
https://www.terraform.io/docs/configuration/data-sources.html#description

---
A data block requests that Terraform read from a given data source ("aws_ami")
and export the result under the given local name ("example"). The name is used
to refer to this resource from elsewhere in the same Terraform module, but has
no significance outside of the scope of a module.

The data source and name together serve as an identifier for a given resource
and so must be unique within a module.

https://www.terraform.io/docs/configuration/data-sources.html#using-data-sources

---
Data resources support count and for_each meta-arguments as defined for managed
resources, with the same syntax and behavior.

https://www.terraform.io/docs/configuration/data-sources.html#multiple-resource-instances

module.main[0].data.null_data_source.count[0]
*/
DataAddress = m:(Module ".")* "data." r:ResourceSpec EOF {
    addr := &DataSourceAddress{
        Type: t.(string),
        Name: n.(string),
    }
    if i != nil {
        addr.Index = i.(Index)
    }
    return addr, nil
}


String = '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    return strconv.Unquote(string(c.text))
} / '"' ( !EscapedChar . / '\\' EscapeSequence )* !'"' {
	return nil, errors.New("string literal not terminated")
}

/*
Identifiers can contain letters, digits, underscores (_), and hyphens (-). The
first character of an identifier must not be a digit, to avoid ambiguity with
literal numbers.
https://www.terraform.io/docs/configuration/syntax.html#identifiers

*/
Identifier = [a-z_-]i [a-zA-Z0-9_-]i* {
    return string(c.text), nil
}

Integer = '-'? [0-9]+ {
    return strconv.Atoi(string(c.text))
}

EscapedChar = [\x00-\x1f"\\]

EscapeSequence = SingleCharEscape / UnicodeEscape

SingleCharEscape = ["\\/bfnrt]

UnicodeEscape = 'u' HexDigit HexDigit HexDigit HexDigit

HexDigit = [0-9a-f]i

EOF = !.
